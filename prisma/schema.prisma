// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  googleId       String          @unique
  email          String          @unique
  firstName      String
  lastName       String
  picture        String?
  sessions       Session[]
  budgets        Budget[]
  transactions   Transaction[]
  transactionId  String?
  reimbursements Reimbursement[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Budget {
  id            Int                  @id @default(autoincrement())
  name          String
  reserve       Decimal              @default(0)
  user          User?                @relation(fields: [userId], references: [id])
  userId        String?
  monthlyLimits MonthlyBudgetLimit[]
  transactions  Transaction[]
}

model MonthlyBudgetLimit {
  id       Int     @id @default(autoincrement())
  year     Int
  month    Int
  limit    Decimal
  budget   Budget? @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId Int?
}

model Transaction {
  id             String             @id @default(cuid())
  amount         Decimal            @default(0)
  date           DateTime           @default(now())
  description    String?
  budget         Budget?            @relation(fields: [budgetId], references: [id])
  budgetId       Int?
  tags           TagOnTransaction[]
  payer          User               @relation(fields: [payerId], references: [id])
  payerId        String
  reimbursements Reimbursement[]
}

model Reimbursement {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  received      Boolean     @default(false)
  payer         User?       @relation(fields: [payerId], references: [id])
  amount        Decimal     @default(0)
  payerId       String?
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
}

model Tag {
  id           String             @id @default(cuid())
  label        String             @unique
  transactions TagOnTransaction[]
}

model TagOnTransaction {
  transaction   Transaction @relation(fields: [transactionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transactionId String
  tag           Tag         @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId         String

  @@id([transactionId, tagId])
}

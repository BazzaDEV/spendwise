// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id
  googleId            String          @unique
  email               String          @unique
  firstName           String
  lastName            String
  picture             String?
  sessions            Session[]
  budgets             Budget[]
  transactions        Transaction[]
  transactionId       String?
  owedReimbursements  Reimbursement[] @relation("OwedReimbursements")
  owingReimbursements Reimbursement[] @relation("OwingReimbursements")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Budget {
  id            Int                  @id @default(autoincrement())
  name          String
  reserve       Decimal              @default(0)
  User          User?                @relation(fields: [userId], references: [id])
  userId        String?
  monthlyLimits MonthlyBudgetLimit[]
  transactions  Transaction[]
}

model MonthlyBudgetLimit {
  id       Int     @id @default(autoincrement())
  year     Int
  month    Int
  limit    Decimal
  Budget   Budget? @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId Int?
}

model Transaction {
  id              String               @id @default(cuid())
  amount          Decimal              @default(0)
  date            DateTime             @default(now())
  description     String?
  Budget          Budget?              @relation(fields: [budgetId], references: [id])
  budgetId        Int?
  tags            TagsOnTransactions[]
  isSharedExpense Boolean              @default(false)
  payer           User                 @relation(fields: [payerId], references: [id])
  payerId         String
  reimbursements  Reimbursement[]
}

model Reimbursement {
  id            Int         @id @default(autoincrement())
  amount        Decimal
  date          DateTime    @default(now())
  payer         User        @relation("OwedReimbursements", fields: [payerId], references: [id])
  payerId       String
  recipient     User        @relation("OwingReimbursements", fields: [recipientId], references: [id])
  recipientId   String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
}

model Tag {
  id           String               @id @default(cuid())
  label        String               @unique
  transactions TagsOnTransactions[]
}

model TagsOnTransactions {
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transactionId String
  Tag           Tag         @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId         String

  @@id([transactionId, tagId])
}
